basePath: /v1
definitions:
  models.CreateOrderRequest:
    description: Request about creating Order
    properties:
      age:
        description: age to make sure you are young
        type: integer
      countryCode:
        description: 'country code like: tr, us'
        type: string
      shipmentNumber:
        description: shipment no of Order
        type: string
    required:
    - age
    - countryCode
    - shipmentNumber
    type: object
  models.ErrResponse:
    description: User Error Response
    properties:
      error:
        type: string
    type: object
  models.Order:
    description: Order Schema
    properties:
      age:
        type: integer
      countryCode:
        type: string
      shipmentNumber:
        type: string
    type: object
  models.User:
    description: User Schema
    properties:
      email:
        type: string
      full_name:
        type: string
      is_active:
        type: boolean
      username:
        type: string
    type: object
  models.UserResponse:
    description: User Valid Response
    properties:
      data:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
host: localhost:8080
info:
  contact: {}
  description: Demo Backend For MCP
  title: Demo Backend
  version: "1"
paths:
  /orders:
    post:
      consumes:
      - application/json
      description: Creates a new order
      parameters:
      - description: Correlation ID
        in: header
        name: x-correlationid
        required: true
        type: string
      - description: Order Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrResponse'
      summary: Create Order
      tags:
      - Orders
  /orders/{orderCode}:
    delete:
      description: Deletes an order
      parameters:
      - description: Order Code
        in: path
        name: orderCode
        required: true
        type: string
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Order not found
          schema:
            type: string
      summary: Delete Order
      tags:
      - Orders
    get:
      consumes:
      - application/json
      description: Retrieves an order by order code
      parameters:
      - description: Correlation ID
        in: header
        name: x-correlationid
        required: true
        type: string
      - description: Order Code
        in: path
        name: orderCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Order'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrResponse'
      summary: Get Order by Code
      tags:
      - Orders
    put:
      consumes:
      - application/json
      description: Updates an existing order
      parameters:
      - description: Correlation ID
        in: header
        name: x-correlationid
        required: true
        type: string
      - description: Order Code
        in: path
        name: orderCode
        required: true
        type: string
      - description: Updated Order
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Order'
        "404":
          description: Order not found
          schema:
            type: string
      summary: Update Order
      tags:
      - Orders
  /users:
    get:
      description: return list of all users from the database
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrResponse'
      summary: return list of all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: create new user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrResponse'
      security:
      - bearerToken: []
      summary: create new user
      tags:
      - Users
  /users/{username}:
    delete:
      description: Deletes a user
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrResponse'
      summary: Delete User
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates an existing user
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Updated User
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrResponse'
      summary: Update User
      tags:
      - Users
securityDefinitions:
  bearerToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
